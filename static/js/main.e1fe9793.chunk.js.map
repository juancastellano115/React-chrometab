{"version":3,"sources":["Clock.js","Card.js","Tarjetas.js","serviceWorker.js","index.js","App.js"],"names":["Clock","useState","Date","hora","sethora","useEffect","setInterval","toLocaleTimeString","Card","datos","className","date","getDay","getDayOfWeek","Day","IconPhrase","icon","icono","src","alt","elegirIcono","Night","Icon","Temperature","Minimum","Value","Maximum","Tarjetas","cargando","setcargando","geo","setgeo","city","setcity","weatherData","setweatherData","geolocation","navigator","getCurrentPosition","position","encodeURI","coords","latitude","longitude","getWeatherData","console","log","fetchWeather","a","fetch","url","response","ok","json","datosTiempo","DailyForecasts","headline","Headline","then","res","datoslocalizacion","Key","LocalizedName","Text","CSSTransition","in","appear","timeout","classNames","map","tarjeta","index","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1fe9793.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nexport default function Clock() {\r\n\r\nconst [hora, sethora] = useState(new Date() )\r\n\r\nconst tick = () =>{\r\n sethora(new Date())\r\n}\r\n\r\nuseEffect(() => {\r\n  setInterval(() => tick(), 1000)\r\n}, [])\r\n\r\n  return (\r\n    <div>\r\n       <div>\r\n        <h1>{hora.toLocaleTimeString()}</h1>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport Tilt from \"react-tilt\";\r\n\r\nexport default function Card({datos}) {\r\n  const urlIcono = \"https://developer.accuweather.com/sites/default/files/\";\r\n\r\n  const elegirIcono = icon=>{\r\n    let icono = icon>10?icon:\"0\"+icon;\r\n    return(<img src={urlIcono+icono+\"-s.png\"} alt=\"icon\"></img>)\r\n    }\r\n\r\n const  getDayOfWeek = date => {\r\n    let fecha = new Date(date).getDay();\r\n    switch (fecha) {\r\n      case 0:\r\n        return \"Domingo\"\r\n      case 1:\r\n        return \"Lunes\"\r\n      case 2:\r\n        return \"Martes\"\r\n      case 3:\r\n        return \"Miércoles\"\r\n      case 4:\r\n        return \"Jueves\"\r\n      case 5:\r\n        return \"Viernes\"\r\n      case 6:\r\n        return \"Sábado\"\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Tilt className=\"card\">\r\n      <h3>{getDayOfWeek(datos.Date)}</h3>\r\n      <p>{datos.Day.IconPhrase}</p>\r\n      {elegirIcono(datos.Night.Icon)}\r\n      <h4>{datos.Temperature.Minimum.Value}º-{datos.Temperature.Maximum.Value}º</h4>\r\n    </Tilt>\r\n  )\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Card from \"./Card\";\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport './transition.css'\r\nexport default function Tarjetas() {\r\n  const [cargando, setcargando] = useState(true);\r\n  const [geo, setgeo] = useState(\"\");\r\n  const [city, setcity] = useState(\"\");\r\n  const [weatherData, setweatherData] = useState({});\r\n\r\n  const accu = \"http://dataservice.accuweather.com/forecasts/v1/daily/5day/\";\r\n  let geolocation =\r\n    \"http://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=QG7VY9lNLMTQXghXPt8bUjyGh3H34ztU&language=es-es&details=false&q=\";\r\n\r\n  useEffect(() => {\r\n    if (\"geolocation\" in navigator) {\r\n      //Comprobar geolocalización del usuario\r\n      navigator.geolocation.getCurrentPosition(position => {\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        geolocation += encodeURI(\r\n          position.coords.latitude + \",\" + position.coords.longitude\r\n        );\r\n        getWeatherData();\r\n      });\r\n    } else {\r\n      console.log(\"Error al obtener geolocalización\");\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (geo !== \"\") {\r\n      let url =\r\n        accu +\r\n        geo +\r\n        \"?apikey=QG7VY9lNLMTQXghXPt8bUjyGh3H34ztU&language=es-es&details=false&metric=true\";\r\n      async function fetchWeather () {\r\n          \r\n        let response = await fetch(url);\r\n        if (response.ok) {\r\n\r\n          let json = await response.json();\r\n          setweatherData({datosTiempo: json.DailyForecasts, headline: json.Headline})\r\n          setcargando(false)\r\n        }\r\n      }\r\n      fetchWeather()\r\n    }\r\n  }, [geo]);\r\n  const getWeatherData = async () => {\r\n    await fetch(geolocation).then(async res => {\r\n      if (res.ok) {\r\n        let datoslocalizacion = await res.json();\r\n        setgeo(datoslocalizacion.Key);\r\n        setcity(datoslocalizacion.LocalizedName);\r\n      }\r\n    });\r\n  };\r\n  return (\r\n    <div>\r\n      {cargando ? (\r\n        \"Cargando...\"\r\n      ) : (\r\n        <div>\r\n          <h1>{city}</h1>\r\n          <p>{weatherData.headline.Text}</p>\r\n          <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          timeout={1000}\r\n          classNames=\"fade\"\r\n        >\r\n          <div className=\"contenedorTarjetas\">\r\n            {weatherData.datosTiempo.map((tarjeta,index) => (\r\n              <Card datos={tarjeta} key={index} />\r\n            ))}\r\n          </div>\r\n          </CSSTransition>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Clock from './Clock.js'\r\nimport Tarjetas from './Tarjetas.js';\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <Clock />\r\n          <Tarjetas />\r\n        </header>\r\n      </div>\r\n  )\r\n}\r\n\r\n"],"sourceRoot":""}